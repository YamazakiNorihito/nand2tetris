// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;      // 2^0
        let powersOfTwo[1] = 2;      // 2^1
        let powersOfTwo[2] = 4;      // 2^2
        let powersOfTwo[3] = 8;      // 2^3
        let powersOfTwo[4] = 16;     // 2^4
        let powersOfTwo[5] = 32;     // 2^5
        let powersOfTwo[6] = 64;     // 2^6
        let powersOfTwo[7] = 128;    // 2^7
        let powersOfTwo[8] = 256;    // 2^8
        let powersOfTwo[9] = 512;    // 2^9
        let powersOfTwo[10] = 1024;  // 2^10
        let powersOfTwo[11] = 2048;  // 2^11
        let powersOfTwo[12] = 4096;  // 2^12
        let powersOfTwo[13] = 8192;  // 2^13
        let powersOfTwo[14] = 16384; // 2^14
        let powersOfTwo[15] = 16384 + 16384; // 2^15

        let n = 16;

        return;
    }

    function boolean bit(int x, int i) {
        if ((powersOfTwo[i] & x) = 0) {
            return false;
        }
        return true;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int i, sum, shiftedX;
        let i = 0;
        let sum = 0;
        let shiftedX = x;

        // 1ビット左シフト(shiftedX = shiftedX + shiftedX) は「×2」と同じ
        // y の i 番目ビットが 1 なら、x * 2^i を結果に加える
        while(i < n){
            if(Math.bit(y,i)){
                let sum = sum + shiftedX;
            }
            // x * 2^i → x * 2^(i+1)
            let shiftedX = shiftedX + shiftedX; // left bit shift -> x << 1
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int result, absX, absY, isXNeg, isYNeg;

        if (y = 0) {
            return 0;
        }
        if (x = 0) {
            return 0;
        }

        let isXNeg = (x < 0);
        let isYNeg = (y < 0);
        let absX = Math.abs(x);
        let absY = Math.abs(y);

        let result = Math._divide(absX, absY);

        if (~(isXNeg = isYNeg)) {
            let result = -result;
        }

        return result;
    }

    function int _divide(int x, int y) {
        var int q, result;
        if (x < y) {
            return 0;
        }

        if ((x - y - y) < 0) {
            let q = 0;
        } else {
            let q = Math._divide(x, y + y);
        }

        if (x - ((q + q) * y) < y) {
            let result = q + q;        // 2*q
        } else {
            let result = q + q + 1;    // 2*q + 1
        }

        return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j,y,powerOfTwo,candidateSquare;

        let j= Math.divide(n, 2) - 1;
        let y = 0;

        while (~(j < 0)) {
            let powerOfTwo = powersOfTwo[j];
            let candidateSquare = y + powerOfTwo;

            // candidateSquare^2 <= x であるか確認
            if (~(candidateSquare > Math.divide(x, candidateSquare))) {
                let y = y + powerOfTwo;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if(a>b){
            return a;
        }
        return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a<b){
            return a;
        }
        return b;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        var int result;
        let result = x;
        if(x < 0){
            let result = -x;
        }
        return result;
    }
}
