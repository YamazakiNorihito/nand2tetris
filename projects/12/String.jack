// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int _maxLength,length;
    field Array chars;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        var int allocSize;
        
        let length = 0;
        let _maxLength = maxLength;
        let allocSize = _maxLength + 1;

        if (allocSize < 1) { let allocSize = 1; }

        let chars = Array.new(allocSize);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < _maxLength) {
            let chars[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
            let chars[length] = 0;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, result;
        var char c;
        var boolean isNegative;

        let isNegative = false;
        let result = 0;
        let i = 0;

        if ((length > 0) & (String._isMinus(charAt(0)))) {
            let isNegative = true;
            let i = 1;                          // 先頭の '-' を読み飛ばす
        }

        while(i < length){
            let c = charAt(i);
            if (String._isDigit(c)) {
                let result = (result * 10) + String._convertInt(c);
                let i = i + 1;
            } else {
                let i = length;
            }
        }

        if(isNegative){
            return -result;
        }else{
            return result;
        }
    }

    function boolean _isMinus(char c){
        if(c = 45){
            return true;
        }else{
            return false;
        }
    }
    function boolean _isDigit(char c) {
        return ((47 < c) & (c < 58));
    }
    function int _convertInt(char c){
        return c - 48;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int n, power, digit;

        let length = 0;

        if (val < 0) {
            let val = -val;
            do appendChar(45); // '-'
        }

        if (val = 0) {
            do appendChar(48);
            return;
        }

        let n = val;
        let power = 1;
        while (n > 9) {
            let power = power * 10;
            let n = n / 10;
        }

        while (power > 0) {
            let digit = val / power;
            do appendChar(48 + digit);
            let val = val - (digit * power);
            let power = power / 10;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
